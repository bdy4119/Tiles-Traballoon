/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.71
 * Generated at: 2023-03-19 15:03:14 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.tripScreen;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import mul.cam.a.util.Utility;
import mul.cam.a.dto.TripDto;
import java.util.List;
import org.springframework.ui.Model;

public final class triplist_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("org.springframework.ui.Model");
    _jspx_imports_classes.add("mul.cam.a.util.Utility");
    _jspx_imports_classes.add("mul.cam.a.dto.TripDto");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

    TripDto dto;

      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <title>Title</title>\r\n");
      out.write("    <link href=\"https://fonts.googleapis.com/css2?family=Noto+Serif+KR&display=swap\" rel=\"stylesheet\">\r\n");
      out.write("\r\n");
      out.write("    <style>\r\n");
      out.write("\r\n");
      out.write("        .col-md-12 {\r\n");
      out.write("            padding-top: 20px;\r\n");
      out.write("            padding-bottom: 20px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        a {\r\n");
      out.write("            color: #333; /* 원하는 색상으로 변경 */\r\n");
      out.write("            text-decoration: none; /* 텍스트 밑줄 제거 */\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        a:hover {\r\n");
      out.write("            text-decoration: none; /* 마우스 오버시 텍스트 밑줄 제거 */\r\n");
      out.write("            color: #333;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .material-design-label {\r\n");
      out.write("            display: inline-block;\r\n");
      out.write("            padding: 8px 16px;\r\n");
      out.write("            color: #fff;\r\n");
      out.write("            background-color: #2196F3;\r\n");
      out.write("            border-radius: 24px;\r\n");
      out.write("            font-weight: 500;\r\n");
      out.write("            font-size: 1.2rem;\r\n");
      out.write("            line-height: 1.5;\r\n");
      out.write("            letter-spacing: 0.01em;\r\n");
      out.write("            text-transform: uppercase;\r\n");
      out.write("            box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.25);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        h1 {\r\n");
      out.write("            font-size: 3em;\r\n");
      out.write("            text-align: center;\r\n");
      out.write("            font-family: 'Noto Serif KR', serif;\r\n");
      out.write("            color: #333;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .card-body {\r\n");
      out.write("            overflow: hidden;\r\n");
      out.write("            height: auto;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .card-body img {\r\n");
      out.write("            max-width: 100%;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

    String korName = "";
    String engName = "";
    String city = (String) request.getAttribute("City");

    if (city.equals("seoul")) {
        korName = "서울";
        engName = "Seoul";
    } else if (city.equals("gyeonggi")) {
        korName = "경기";
        engName = "Gyeonggi";
    } else if (city.equals("gangwon")) {
        korName = "강원";
        engName = "Gangwon";
    } else if (city.equals("chungcheong")) {
        korName = "충청";
        engName = "Chungcheong";
    } else if (city.equals("jeolla")) {
        korName = "전라";
        engName = "Jeolla";
    } else if (city.equals("gyeongsang")) {
        korName = "경상";
        engName = "Gyeongsang";
    } else if (city.equals("jeju")) {
        korName = "제주";
        engName = "Jeju";
    } else if (city.equals("incheon")) {
        korName = "인천";
        engName = "Incheon";
    }

    String abc = "abc";

      out.write("\r\n");
      out.write("\r\n");
      out.write("<main>\r\n");
      out.write("\r\n");
      out.write("    <div class=\"container\">\r\n");
      out.write("\r\n");
      out.write("        <br>\r\n");
      out.write("        <h1>Welcome to \"");
      out.print( engName );
      out.write("\"</h1>\r\n");
      out.write("\r\n");
      out.write("        ");

            List<TripDto> list = (List<TripDto>) request.getAttribute("triplist");
        
      out.write("\r\n");
      out.write("        ");

            if (list == null || list.size() == 0) {
        
      out.write("\r\n");
      out.write("        <tr>\r\n");
      out.write("            <td colspan=\"4\">작성된 글이 없습니다</td>\r\n");
      out.write("        </tr>\r\n");
      out.write("        ");

            }
        
      out.write("\r\n");
      out.write("\r\n");
      out.write("        <div class=\"col\">\r\n");
      out.write("            ");

                for (int i = 0; i < list.size(); i++) {
                    dto = list.get(i);
            
      out.write("\r\n");
      out.write("            <hr>\r\n");
      out.write("            <a href=\"tripdetail.do?seq=");
      out.print(dto.getSeq() );
      out.write("\">\r\n");
      out.write("                <div class=\"col-md-12\">\r\n");
      out.write("                    <div class=\"row\">\r\n");
      out.write("                        <div class=\"col-4\">\r\n");
      out.write("                            <div class=\"card-body\">\r\n");
      out.write("                                ");
      out.print(dto.getImage() );
      out.write("\r\n");
      out.write("                            </div>\r\n");
      out.write("                        </div>\r\n");
      out.write("                        <div class=\"col-8\">\r\n");
      out.write("                            <div class=\"card-body\">\r\n");
      out.write("                                <h3 class=\"card-title\">");
      out.print(dto.getSpot());
      out.write("\r\n");
      out.write("                                </h3>\r\n");
      out.write("                                <p class=\"card-text\">");
      out.print(dto.getTitle());
      out.write("\r\n");
      out.write("                                </p>\r\n");
      out.write("                            </div>\r\n");
      out.write("                        </div>\r\n");
      out.write("                    </div>\r\n");
      out.write("                </div>\r\n");
      out.write("            </a>\r\n");
      out.write("            ");

                }
            
      out.write("\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("</main>\r\n");
      out.write("<br>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
