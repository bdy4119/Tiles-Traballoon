/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.71
 * Generated at: 2023-03-19 15:05:44 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.reviewScreen;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import mul.cam.a.dto.MemberDto;
import mul.cam.a.dto.ReviewDto;

public final class reviewUpdate_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("mul.cam.a.dto.MemberDto");
    _jspx_imports_classes.add("mul.cam.a.dto.ReviewDto");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("	<head>\r\n");
      out.write("	    <meta charset=\"utf-8\">\r\n");
      out.write("	    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n");
      out.write("	    <title>SemiProject</title>\r\n");
      out.write("	\r\n");
      out.write("	    ");
      out.write("\r\n");
      out.write("	    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin=\"anonymous\">\r\n");
      out.write("	    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js\" integrity=\"sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("	    \r\n");
      out.write("	    <!-- ajax -->\r\n");
      out.write("	    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.3/jquery.min.js\"></script>\r\n");
      out.write("	    \r\n");
      out.write("		<!-- 서머노트를 위해 추가해야할 부분 -->\r\n");
      out.write("	   	<link href=\"https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote.min.css\" rel=\"stylesheet\"> \r\n");
      out.write("	  	<script src=\"https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote.min.js\"></script>\r\n");
      out.write("	  	<script src=\" https://cdnjs.cloudflare.com/ajax/libs/summernote/0.8.18/lang/summernote-ko-KR.min.js\"></script>	\r\n");
      out.write("		\r\n");
      out.write("	  	<link rel=\"stylesheet\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/summernote/summernote-lite.css\">\r\n");
      out.write("	  	<script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/summernote/summernote-lite.js\"></script>\r\n");
      out.write("	  	<script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/summernote/lang/summernote-ko-KR.js\"></script>\r\n");
      out.write("	  	<!--  -->\r\n");
      out.write("	</head>\r\n");
      out.write("	<body>\r\n");
      out.write("		");

		ReviewDto dto = (ReviewDto)request.getAttribute("dto");
		
      out.write("\r\n");
      out.write("		<div class=\"container\">\r\n");
      out.write("		    <img src=\"images/beach.jpg\" class=\"img-fluid\" alt=\"Responsive image\">\r\n");
      out.write("		    <br>\r\n");
      out.write("		    <br>\r\n");
      out.write("		    <form action=\"reviewUpdateAf.do\" id=\"frm\" method=\"post\" type=\"submit\" enctype=\"multipart/form-data\">\r\n");
      out.write("		    <input type=\"hidden\" name=\"seq\" value=\"");
      out.print(dto.getSeq() );
      out.write("\" >\r\n");
      out.write("		        <div class=\"form-group\">\r\n");
      out.write("		            <label>아이디</label>\r\n");
      out.write("		            <input type=\"text\" class=\"form-control\" name=\"id\" value=\"");
      out.print(dto.getId() );
      out.write("\" readonly=\"readonly\">\r\n");
      out.write("		        </div>\r\n");
      out.write("		        <div class=\"form-group\">\r\n");
      out.write("		            <label for=\"title\">제목</label>\r\n");
      out.write("		            <input type=\"text\" class=\"form-control\" id=\"title\" name=\"title\" value='");
      out.print(dto.getTitle() );
      out.write("'>\r\n");
      out.write("		        </div>\r\n");
      out.write("		        <label>내용</label>\r\n");
      out.write("		        <textarea id=\"summernote\" name=\"content\" class=\"summernote\">\r\n");
      out.write("		        	");

					for(int i=1; i<=11; i++) {
						if(dto.getSeq() == i){
						
      out.write("\r\n");
      out.write("						<img src=\"images/review/");
      out.print(i);
      out.write(".jpg\" class=\"d-block w-100\">\r\n");
      out.write("						<br>\r\n");
      out.write("						");

						}
					}
					
      out.write("\r\n");
      out.write("		        	");
      out.print(dto.getContent() );
      out.write("\r\n");
      out.write("		        </textarea>\r\n");
      out.write("		        <div class=\"d-flex justify-content-center mt-4\">\r\n");
      out.write("		            <button id=\"reviewUpdateAf\" type=\"submit\" class=\"btn btn-secondary\">수정 완료</button>\r\n");
      out.write("		        </div>\r\n");
      out.write("		    </form>\r\n");
      out.write("		    <br>\r\n");
      out.write("		</div>\r\n");
      out.write("		\r\n");
      out.write("	<script type=\"text/javascript\">\r\n");
      out.write("		$(document).ready(function(){\r\n");
      out.write("			$(\"#reviewUpdateAf\").click(function(){\r\n");
      out.write("				\r\n");
      out.write("				$.ajax({\r\n");
      out.write("					type:\"POST\",\r\n");
      out.write("					url:\"reviewUpdateAf.do\",\r\n");
      out.write("					data: {\r\n");
      out.write("						\"title\" : $(\"title\").val(),\r\n");
      out.write("						\"content\" : $(\"content\").val()},\r\n");
      out.write("					success:function(str) {\r\n");
      out.write("						if(str == \"REVIEW_UPDATE_OK\") {\r\n");
      out.write("							alert(\"성공적으로 수정되었습니다.\");\r\n");
      out.write("							location.href=\"review.do\";\r\n");
      out.write("						}\r\n");
      out.write("					},\r\n");
      out.write("					error:function() {\r\n");
      out.write("						alert(\"수정에 실패했습니다.\");\r\n");
      out.write("						location.href=\"review.do\";\r\n");
      out.write("					}\r\n");
      out.write("				})\r\n");
      out.write("			})\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		$(document).ready(function() {\r\n");
      out.write("\r\n");
      out.write("			var toolbar = [\r\n");
      out.write("				    // 글꼴 설정\r\n");
      out.write("				    ['fontname', ['fontname']],\r\n");
      out.write("				    // 글자 크기 설정\r\n");
      out.write("				    ['fontsize', ['fontsize']],\r\n");
      out.write("				    // 굵기, 기울임꼴, 밑줄,취소 선, 서식지우기\r\n");
      out.write("				    ['style', ['bold', 'italic', 'underline','strikethrough', 'clear']],\r\n");
      out.write("				    // 글자색\r\n");
      out.write("				    ['color', ['forecolor','color']],\r\n");
      out.write("				    // 표만들기\r\n");
      out.write("				    ['table', ['table']],\r\n");
      out.write("				    // 글머리 기호, 번호매기기, 문단정렬\r\n");
      out.write("				    ['para', ['ul', 'ol', 'paragraph']],\r\n");
      out.write("				    // 줄간격\r\n");
      out.write("				    ['height', ['height']],\r\n");
      out.write("				    // 그림첨부, 링크만들기, 동영상첨부\r\n");
      out.write("				    ['insert',['picture','link','video']],\r\n");
      out.write("				    // 코드보기, 확대해서보기, 도움말\r\n");
      out.write("				    ['view', ['codeview','fullscreen', 'help']]\r\n");
      out.write("				  ];\r\n");
      out.write("\r\n");
      out.write("			var setting = {\r\n");
      out.write("		            height : 300,\r\n");
      out.write("		            minHeight : null,\r\n");
      out.write("		            maxHeight : null,\r\n");
      out.write("		            focus : true,\r\n");
      out.write("		            lang : 'ko-KR',\r\n");
      out.write("		            toolbar : toolbar,\r\n");
      out.write("		            callbacks : { //여기 부분이 이미지를 첨부하는 부분\r\n");
      out.write("		            onImageUpload : function(files, editor, welEditable) {\r\n");
      out.write("		           	 	for (var i = files.length - 1; i >= 0; i--) {\r\n");
      out.write("		            		uploadSummernoteImageFile(files[i], this);\r\n");
      out.write("		            		}\r\n");
      out.write("		            	}\r\n");
      out.write("		            }\r\n");
      out.write("		         };\r\n");
      out.write("\r\n");
      out.write("		    $('#summernote').summernote(setting);\r\n");
      out.write("		});\r\n");
      out.write("		    \r\n");
      out.write("		    \r\n");
      out.write("		    \r\n");
      out.write("		    function uploadSummernoteImageFile(file, el) {\r\n");
      out.write("				data = new FormData();\r\n");
      out.write("				data.append(\"file\", file);\r\n");
      out.write("				const directory = \"productInfo\";\r\n");
      out.write("				\r\n");
      out.write("				$.ajax({\r\n");
      out.write("					data : data,\r\n");
      out.write("					type : \"post\",\r\n");
      out.write("					url : \"uploadSummernoteImageFile.do\",\r\n");
      out.write("					contentType : false,\r\n");
      out.write("					enctype : 'multipart/form-data',\r\n");
      out.write("					processData : false,\r\n");
      out.write("					success : function(data) {\r\n");
      out.write("						$(el).summernote('editor.insertImage', data.url);\r\n");
      out.write("					}\r\n");
      out.write("				});\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			/*썸머노트 함수\r\n");
      out.write("				//text 쓰기\r\n");
      out.write("				$('#summernote').summernote('insertText', 써머노트에 쓸 텍스트);\r\n");
      out.write("				\r\n");
      out.write("				\r\n");
      out.write("				//쓰기 비활성화\r\n");
      out.write("				$('#summernote').summernote('disable');\r\n");
      out.write("				\r\n");
      out.write("				//쓰기 활성화\r\n");
      out.write("				$('#summernote').summernote('enable');\r\n");
      out.write("				\r\n");
      out.write("				\r\n");
      out.write("				//리셋\r\n");
      out.write("				$('#summernote').summernote('reset');\r\n");
      out.write("				\r\n");
      out.write("				\r\n");
      out.write("				//뒤로가기\r\n");
      out.write("				$('#summernote').summernote('undo');\r\n");
      out.write("				// 앞으로가기\r\n");
      out.write("				$('#summernote').summernote('redo');\r\n");
      out.write("			*/\r\n");
      out.write("	</script>\r\n");
      out.write("	");
      out.write("\r\n");
      out.write("	\r\n");
      out.write("	");
      out.write("\r\n");
      out.write("	<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js\"\r\n");
      out.write("	        integrity=\"sha384-w76AqPfDkMBDXo30jS1Sgez6pr3x5MlQ1ZAGC+nuZB+EYdgRZgiwxhTBTkF7CXvN\"\r\n");
      out.write("	        crossorigin=\"anonymous\">\r\n");
      out.write("	</script>\r\n");
      out.write("	");
      out.write("\r\n");
      out.write("	\r\n");
      out.write("	</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
