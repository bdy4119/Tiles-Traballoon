/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.71
 * Generated at: 2023-03-26 06:17:37 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.reviewScreen;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import mul.cam.a.dto.MemberDto;
import mul.cam.a.dao.ReviewDao;
import mul.cam.a.dto.ReviewDto;
import java.util.List;
import mul.cam.a.util.Utility;
import mul.cam.a.dto.BbsDto;

public final class reviewwrite_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("mul.cam.a.dao.ReviewDao");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("mul.cam.a.dto.BbsDto");
    _jspx_imports_classes.add("mul.cam.a.util.Utility");
    _jspx_imports_classes.add("mul.cam.a.dto.MemberDto");
    _jspx_imports_classes.add("mul.cam.a.dto.ReviewDto");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("    \n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!doctype html>\n");
      out.write("<html lang=\"en\">\n");
      out.write("<head>\n");
      out.write("    <meta charset=\"utf-8\">\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n");
      out.write("    <title>SemiProject</title>\n");
      out.write("\n");
      out.write("    ");
      out.write("\n");
      out.write("    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin=\"anonymous\">\n");
      out.write("    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js\" integrity=\"sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6\" crossorigin=\"anonymous\"></script>\n");
      out.write("    \n");
      out.write("    <!-- ajax -->\n");
      out.write("    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.3/jquery.min.js\"></script>\n");
      out.write("    \n");
      out.write("	<!-- 서머노트를 위해 추가해야할 부분 -->\n");
      out.write("   	<link href=\"https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote.min.css\" rel=\"stylesheet\"> \n");
      out.write("  	<script src=\"https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote.min.js\"></script>\n");
      out.write("  	<script src=\" https://cdnjs.cloudflare.com/ajax/libs/summernote/0.8.18/lang/summernote-ko-KR.min.js\"></script>	\n");
      out.write("	\n");
      out.write("  	<link rel=\"stylesheet\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/summernote/summernote-lite.css\">\n");
      out.write("  	<script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/summernote/summernote-lite.js\"></script>\n");
      out.write("  	<script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/summernote/lang/summernote-ko-KR.js\"></script>\n");
      out.write("\n");
      out.write("</head>\n");
      out.write("\n");
      out.write("<body>\n");
      out.write("\n");

    ReviewDto dto = (ReviewDto) request.getAttribute("dto");
    
	
	Object loginObj = session.getAttribute("login");	//dto에 안담겨있을 수도 있으므로
	MemberDto login = new MemberDto(); //초기화해주기
	
	boolean isS = false;
	if(loginObj == null){
		
      out.write("\n");
      out.write("		<script>\n");
      out.write("			alert('로그인 해 주십시오');\n");
      out.write("			location.href = \"login.do\";\n");
      out.write("		</script>\n");
      out.write("		");

		} else {
			login = (MemberDto)session.getAttribute("login");
			isS = true;
		}
		request.setAttribute("isS", isS);

      out.write("\n");
      out.write("\n");
      out.write("<div class=\"container\">\n");
      out.write("    <img src=\"images/beach.jpg\" class=\"img-fluid\" alt=\"Responsive image\">\n");
      out.write("    <br>\n");
      out.write("    <br>\n");
      out.write("    <form action=\"writeReviewAf.do\" id=\"frm\" method=\"post\" type=\"submit\" enctype=\"multipart/form-data\">\n");
      out.write("        <div class=\"form-group\">\n");
      out.write("            <label>아이디</label>\n");
      out.write("            <input type=\"text\" class=\"form-control\" name=\"id\" value=\"");
      out.print(login.getId() );
      out.write("\" readonly=\"readonly\">\n");
      out.write("        </div>\n");
      out.write("        <div class=\"form-group\">\n");
      out.write("            <label for=\"title\">제목</label>\n");
      out.write("            <input type=\"text\" class=\"form-control\" id=\"title\" name=\"title\" placeholder=\"제목을 입력하세요\">\n");
      out.write("        </div>\n");
      out.write("        <label>내용</label>\n");
      out.write("        <textarea id=\"summernote\" name=\"content\" class=\"summernote\"></textarea>\n");
      out.write("        <div class=\"d-flex justify-content-center mt-4\">\n");
      out.write("            <button id=\"reviewwrite\" type=\"submit\" class=\"btn btn-secondary\">작성완료</button>\n");
      out.write("        </div>\n");
      out.write("    </form>\n");
      out.write("    <br>\n");
      out.write("</div>\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("\n");
      out.write("	$(document).ready(function() {\n");
      out.write("	\n");
      out.write("		$(\"#reviewwrite\").click(function() {\n");
      out.write("			$.ajax({\n");
      out.write("				type:\"POST\",\n");
      out.write("				url:\"writeReviewAf.do\",\n");
      out.write("				data: {\n");
      out.write("					\"id\" : $(\"id\").val(),\n");
      out.write("					\"title\" : $(\"title\").val(),\n");
      out.write("					\"content\" : $(\"content\").val()},\n");
      out.write("				success: function(str) {\n");
      out.write("					if(str == \"REVIEW_ADD_OK\") {\n");
      out.write("						alert(\"글이 등록되었습니다.\");\n");
      out.write("						location.href=\"review.do\";\n");
      out.write("					} else {\n");
      out.write("						alert(\"글을 등록하지 못했습니다.\");\n");
      out.write("						location.href=\"review.do\";\n");
      out.write("					}\n");
      out.write("				}/* , error: function() {\n");
      out.write("					alert(\"글을 등록하지 못했습니다.\");\n");
      out.write("					location.href=\"review.do\";\n");
      out.write("				} */\n");
      out.write("			})\n");
      out.write("		})\n");
      out.write("	});\n");
      out.write("	\n");
      out.write("	\n");
      out.write("	$(document).ready(function() {\n");
      out.write("\n");
      out.write("		var toolbar = [\n");
      out.write("			    // 글꼴 설정\n");
      out.write("			    ['fontname', ['fontname']],\n");
      out.write("			    // 글자 크기 설정\n");
      out.write("			    ['fontsize', ['fontsize']],\n");
      out.write("			    // 굵기, 기울임꼴, 밑줄,취소 선, 서식지우기\n");
      out.write("			    ['style', ['bold', 'italic', 'underline','strikethrough', 'clear']],\n");
      out.write("			    // 글자색\n");
      out.write("			    ['color', ['forecolor','color']],\n");
      out.write("			    // 표만들기\n");
      out.write("			    ['table', ['table']],\n");
      out.write("			    // 글머리 기호, 번호매기기, 문단정렬\n");
      out.write("			    ['para', ['ul', 'ol', 'paragraph']],\n");
      out.write("			    // 줄간격\n");
      out.write("			    ['height', ['height']],\n");
      out.write("			    // 그림첨부, 링크만들기, 동영상첨부\n");
      out.write("			    ['insert',['picture','link','video']],\n");
      out.write("			    // 코드보기, 확대해서보기, 도움말\n");
      out.write("			    ['view', ['codeview','fullscreen', 'help']]\n");
      out.write("			  ];\n");
      out.write("\n");
      out.write("		var setting = {\n");
      out.write("	            height : 300,\n");
      out.write("	            minHeight : null,\n");
      out.write("	            maxHeight : null,\n");
      out.write("	            focus : true,\n");
      out.write("	            lang : 'ko-KR',\n");
      out.write("	            toolbar : toolbar,\n");
      out.write("	            callbacks : { //여기 부분이 이미지를 첨부하는 부분\n");
      out.write("	            onImageUpload : function(files, editor, welEditable) {\n");
      out.write("	           	 	for (var i = files.length - 1; i >= 0; i--) {\n");
      out.write("	            		uploadSummernoteImageFile(files[i], this);\n");
      out.write("	            		}\n");
      out.write("	            	}\n");
      out.write("	            }\n");
      out.write("	         };\n");
      out.write("\n");
      out.write("	    $('#summernote').summernote(setting);\n");
      out.write("	});\n");
      out.write("	    \n");
      out.write("	    \n");
      out.write("	    \n");
      out.write("	    function uploadSummernoteImageFile(file, el) {\n");
      out.write("			data = new FormData();\n");
      out.write("			data.append(\"file\", file);\n");
      out.write("			const directory = \"productInfo\";\n");
      out.write("			\n");
      out.write("			$.ajax({\n");
      out.write("				data : data,\n");
      out.write("				type : \"post\",\n");
      out.write("				url : \"uploadSummernoteImageFile.do\",\n");
      out.write("				contentType : false,\n");
      out.write("				enctype : 'multipart/form-data',\n");
      out.write("				processData : false,\n");
      out.write("				success : function(data) {\n");
      out.write("					$(el).summernote('editor.insertImage', data.url);\n");
      out.write("				}\n");
      out.write("			});\n");
      out.write("		}\n");
      out.write("		\n");
      out.write("		/*썸머노트 함수\n");
      out.write("			//text 쓰기\n");
      out.write("			$('#summernote').summernote('insertText', 써머노트에 쓸 텍스트);\n");
      out.write("			\n");
      out.write("			\n");
      out.write("			//쓰기 비활성화\n");
      out.write("			$('#summernote').summernote('disable');\n");
      out.write("			\n");
      out.write("			//쓰기 활성화\n");
      out.write("			$('#summernote').summernote('enable');\n");
      out.write("			\n");
      out.write("			\n");
      out.write("			//리셋\n");
      out.write("			$('#summernote').summernote('reset');\n");
      out.write("			\n");
      out.write("			\n");
      out.write("			//뒤로가기\n");
      out.write("			$('#summernote').summernote('undo');\n");
      out.write("			// 앞으로가기\n");
      out.write("			$('#summernote').summernote('redo');\n");
      out.write("		*/\n");
      out.write("		\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>\n");
      out.write("        \n");
      out.write("    \n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
